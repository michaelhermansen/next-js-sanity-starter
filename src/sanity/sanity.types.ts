/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type AllArticles = {
  _type: "all-articles";
  padding?: SectionPadding;
  colorVariant?:
    | "background"
    | "primary"
    | "secondary"
    | "card"
    | "accent"
    | "destructive"
    | "muted";
};

export type SectionHeader = {
  _type: "section-header";
  padding?: SectionPadding;
  colorVariant?:
    | "background"
    | "primary"
    | "secondary"
    | "card"
    | "accent"
    | "destructive"
    | "muted";
  sectionWidth?: "default" | "narrow";
  stackAlign?: "left" | "center";
  tagLine?: string;
  title?: string;
  description?: string;
};

export type PageHero = {
  _type: "page-hero";
  title?: string;
  paragraph?: string;
  links?: Array<
    {
      _key: string;
    } & Link
  >;
  centered?: boolean;
};

export type SectionPadding = {
  _type: "section-padding";
  top?: boolean;
  bottom?: boolean;
};

export type ColorVariant =
  | "background"
  | "primary"
  | "secondary"
  | "card"
  | "accent"
  | "destructive"
  | "muted";

export type Link = {
  _type: "link";
  title?: string;
  href?: string;
  targetBlank?: boolean;
};

export type BlockContent = Array<
  | {
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }
  | {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
      _key: string;
    }
  | {
      videoUrl?: string;
      _type: "video";
      _key: string;
    }
>;

export type Modules = Array<
  | ({
      _key: string;
    } & PageHero)
  | ({
      _key: string;
    } & SectionHeader)
  | ({
      _key: string;
    } & AllArticles)
>;

export type Category = {
  _id: string;
  _type: "category";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  orderRank?: string;
};

export type Article = {
  _id: string;
  _type: "article";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  excerpt?: string;
  author?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "author";
  };
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  categories?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "category";
  }>;
  body?: BlockContent;
  meta_title?: string;
  meta_description?: string;
  noindex?: boolean;
  ogImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
};

export type Author = {
  _id: string;
  _type: "author";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  orderRank?: string;
};

export type Page = {
  _id: string;
  _type: "page";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  modules?: Modules;
  meta_title?: string;
  meta_description?: string;
  noindex?: boolean;
  ogImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  orderRank?: string;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type AllSanitySchemaTypes =
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityFileAsset
  | Geopoint
  | AllArticles
  | SectionHeader
  | PageHero
  | SectionPadding
  | ColorVariant
  | Link
  | BlockContent
  | Modules
  | Category
  | Article
  | Author
  | Page
  | SanityImageCrop
  | SanityImageHotspot
  | SanityImageAsset
  | SanityAssetSourceData
  | SanityImageMetadata
  | Slug;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: src/app/sitemap.ts
// Variable: pagesQuery
// Query: *[_type == 'page'] | order(slug.current) {      'url': $baseUrl + select(slug.current == 'index' => '', '/' + slug.current),      'lastModified': _updatedAt,      'changeFrequency': 'daily',      'priority': select(        slug.current == 'index' => 1,        0.5      )    }
export type PagesQueryResult = Array<{
  url: unknown;
  lastModified: string;
  changeFrequency: "daily";
  priority: 0.5 | 1;
}>;
// Variable: articleQuery
// Query: *[_type == 'article'] | order(_updatedAt desc) {      'url': $baseUrl + '/artikler/' + slug.current,      'lastModified': _updatedAt,      'changeFrequency': 'weekly',      'priority': 0.7    }
export type ArticleQueryResult = Array<{
  url: unknown;
  lastModified: string;
  changeFrequency: "weekly";
  priority: 0.7;
}>;

// Source: src/sanity/queries/article.ts
// Variable: singleArticleQuery
// Query: *[_type == "article" && slug.current == $slug][0] {      _id,      _type,      _createdAt,      _updatedAt,      slug,      title,      slug,      excerpt,      image,      body,      meta_title,      meta_description,      noindex,      ogImage {        ...,          asset->{    _id,    metadata {      dimensions {        width,        height      }    }  }      },      author->{        name,        image {          ...,            asset->{    _id,    metadata {      dimensions {        width,        height      }    }  },        }      },      image {        ...,          asset->{    _id,    metadata {      dimensions {        width,        height      }    }  }      },      categories[]->{        _id,        title,        slug,      },    }
export type SingleArticleQueryResult = {
  _id: string;
  _type: "article";
  _createdAt: string;
  _updatedAt: string;
  slug: Slug | null;
  title: string | null;
  excerpt: string | null;
  image: {
    asset: {
      _id: string;
      metadata: {
        dimensions: {
          width: number | null;
          height: number | null;
        } | null;
      } | null;
    } | null;
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  body: BlockContent | null;
  meta_title: string | null;
  meta_description: string | null;
  noindex: boolean | null;
  ogImage: {
    asset: {
      _id: string;
      metadata: {
        dimensions: {
          width: number | null;
          height: number | null;
        } | null;
      } | null;
    } | null;
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  } | null;
  author: {
    name: string | null;
    image: {
      asset: {
        _id: string;
        metadata: {
          dimensions: {
            width: number | null;
            height: number | null;
          } | null;
        } | null;
      } | null;
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    } | null;
  } | null;
  categories: Array<{
    _id: string;
    title: string | null;
    slug: Slug | null;
  }> | null;
} | null;
// Variable: multipleArticlesQuery
// Query: *[_type == "article" && defined(slug) && (      !defined($categories) ||       count($categories) == 0 ||       count((categories[]->slug.current)[@ in $categories]) > 0    )] | order(_createdAt desc) {      _id,      _createdAt,      title,      slug,      excerpt,      image {        ...,          asset->{    _id,    metadata {      dimensions {        width,        height      }    }  }      },      categories[]->{        _id,        title,        slug,      },    }
export type MultipleArticlesQueryResult = Array<{
  _id: string;
  _createdAt: string;
  title: string | null;
  slug: Slug | null;
  excerpt: string | null;
  image: {
    asset: {
      _id: string;
      metadata: {
        dimensions: {
          width: number | null;
          height: number | null;
        } | null;
      } | null;
    } | null;
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  } | null;
  categories: Array<{
    _id: string;
    title: string | null;
    slug: Slug | null;
  }> | null;
}>;

// Source: src/sanity/queries/category.ts
// Variable: multipleCategoriesQuery
// Query: *[_type == "category"] | order(orderRank asc) {      title,      slug    }
export type MultipleCategoriesQueryResult = Array<{
  title: string | null;
  slug: Slug | null;
}>;

// Source: src/sanity/queries/page.ts
// Variable: singlePageQuery
// Query: *[_type == "page" && slug.current == $slug][0]{      _id,      _type,      slug,      title,      meta_title,      meta_description,      noindex,      ogImage {        ...,          asset->{    _id,    metadata {      dimensions {        width,        height      }    }  }      },        modules[]{    _type == "page-hero" => {...},    _type == "all-articles" => {...},    _type == "section-header" => {...}  }    }
export type SinglePageQueryResult = {
  _id: string;
  _type: "page";
  slug: Slug | null;
  title: string | null;
  meta_title: string | null;
  meta_description: string | null;
  noindex: boolean | null;
  ogImage: {
    asset: {
      _id: string;
      metadata: {
        dimensions: {
          width: number | null;
          height: number | null;
        } | null;
      } | null;
    } | null;
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  } | null;
  modules: Array<
    | {
        _key: string;
        _type: "all-articles";
        padding?: SectionPadding;
        colorVariant?:
          | "accent"
          | "background"
          | "card"
          | "destructive"
          | "muted"
          | "primary"
          | "secondary";
      }
    | {
        _key: string;
        _type: "page-hero";
        title?: string;
        paragraph?: string;
        links?: Array<
          {
            _key: string;
          } & Link
        >;
        centered?: boolean;
      }
    | {
        _key: string;
        _type: "section-header";
        padding?: SectionPadding;
        colorVariant?:
          | "accent"
          | "background"
          | "card"
          | "destructive"
          | "muted"
          | "primary"
          | "secondary";
        sectionWidth?: "default" | "narrow";
        stackAlign?: "center" | "left";
        tagLine?: string;
        title?: string;
        description?: string;
      }
  > | null;
} | null;

// Source: src/sanity/queries/search-results.ts
// Variable: searchResultsQuery
// Query: *[_type in ["page", "article"] && _id in $documents] {      _id,      _type,      title,      slug,      excerpt    }
export type SearchResultsQueryResult = Array<
  | {
      _id: string;
      _type: "article";
      title: string | null;
      slug: Slug | null;
      excerpt: string | null;
    }
  | {
      _id: string;
      _type: "page";
      title: string | null;
      slug: Slug | null;
      excerpt: null;
    }
>;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "\n    *[_type == 'page'] | order(slug.current) {\n      'url': $baseUrl + select(slug.current == 'index' => '', '/' + slug.current),\n      'lastModified': _updatedAt,\n      'changeFrequency': 'daily',\n      'priority': select(\n        slug.current == 'index' => 1,\n        0.5\n      )\n    }\n  ": PagesQueryResult;
    "\n    *[_type == 'article'] | order(_updatedAt desc) {\n      'url': $baseUrl + '/artikler/' + slug.current,\n      'lastModified': _updatedAt,\n      'changeFrequency': 'weekly',\n      'priority': 0.7\n    }\n  ": ArticleQueryResult;
    '\n    *[_type == "article" && slug.current == $slug][0] {\n      _id,\n      _type,\n      _createdAt,\n      _updatedAt,\n      slug,\n      title,\n      slug,\n      excerpt,\n      image,\n      body,\n      meta_title,\n      meta_description,\n      noindex,\n      ogImage {\n        ...,\n        \n  asset->{\n    _id,\n    metadata {\n      dimensions {\n        width,\n        height\n      }\n    }\n  }\n\n      },\n      author->{\n        name,\n        image {\n          ...,\n          \n  asset->{\n    _id,\n    metadata {\n      dimensions {\n        width,\n        height\n      }\n    }\n  }\n,\n        }\n      },\n      image {\n        ...,\n        \n  asset->{\n    _id,\n    metadata {\n      dimensions {\n        width,\n        height\n      }\n    }\n  }\n\n      },\n      categories[]->{\n        _id,\n        title,\n        slug,\n      },\n    }\n  ': SingleArticleQueryResult;
    '\n    *[_type == "article" && defined(slug) && (\n      !defined($categories) || \n      count($categories) == 0 || \n      count((categories[]->slug.current)[@ in $categories]) > 0\n    )] | order(_createdAt desc) {\n      _id,\n      _createdAt,\n      title,\n      slug,\n      excerpt,\n      image {\n        ...,\n        \n  asset->{\n    _id,\n    metadata {\n      dimensions {\n        width,\n        height\n      }\n    }\n  }\n\n      },\n      categories[]->{\n        _id,\n        title,\n        slug,\n      },\n    }\n  ': MultipleArticlesQueryResult;
    '\n    *[_type == "category"] | order(orderRank asc) {\n      title,\n      slug\n    }\n  ': MultipleCategoriesQueryResult;
    '\n    *[_type == "page" && slug.current == $slug][0]{\n      _id,\n      _type,\n      slug,\n      title,\n      meta_title,\n      meta_description,\n      noindex,\n      ogImage {\n        ...,\n        \n  asset->{\n    _id,\n    metadata {\n      dimensions {\n        width,\n        height\n      }\n    }\n  }\n\n      },\n      \n  modules[]{\n    _type == "page-hero" => {...},\n    _type == "all-articles" => {...},\n    _type == "section-header" => {...}\n  }\n\n    }\n  ': SinglePageQueryResult;
    '\n    *[_type in ["page", "article"] && _id in $documents] {\n      _id,\n      _type,\n      title,\n      slug,\n      excerpt\n    }\n  ': SearchResultsQueryResult;
  }
}
